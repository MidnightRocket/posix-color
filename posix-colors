#!/bin/sh
# shellcheck disable=SC2034 # Allow unused variables

# Strict shell execution commented out.
# People sourcing this file may not expect/want strict shell exection.
# See: https://unix.stackexchange.com/a/595254
# set -eu


# CREDITS: https://github.com/MidnightRocket/posix-colors
if [ "${FORCE_COLOR:-"false"}" = "true" ] || [ -t 1 ] && [ -t 2 ] && [ "${USE_COLOR:-"true"}" = "true" ]; then readonly T_USE_COLOR=true; else unset T_USE_COLOR; fi

# Need to put this in variable on its own.
# It cannot be directly in parameter expansion below because then it won't work in bash and ksh
T_ESC="\033[" # ¯\_(ツ)_/¯
readonly T_ESC="${T_USE_COLOR+"$T_ESC"}"

###   -----   RESET FORMAT OR COLOR   -----   ###
readonly TR="${T_ESC}${T_USE_COLOR+"0m"}"
readonly TR_F="${T_ESC}${T_USE_COLOR+"39m"}"                TR_B="${T_ESC}${T_USE_COLOR+"49m"}"

# --- These escape codes are not always supported --- #
# readonly TR_BOLD="${T_ESC}${T_USE_COLOR+"21m"}"             TR_BLINK="${T_ESC}${T_USE_COLOR+"25m"}"
# readonly TR_DIM="${T_ESC}${T_USE_COLOR+"22m"}"              TR_REVERSE="${T_ESC}${T_USE_COLOR+"27m"}"
# readonly TR_ITALIC="${T_ESC}${T_USE_COLOR+"23m"}"           TR_HIDDEN="${T_ESC}${T_USE_COLOR+"28m"}"
# readonly TR_UNDERLINE="${T_ESC}${T_USE_COLOR+"24m"}"        TR_STRIKE="${T_ESC}${T_USE_COLOR+"29m"}"

###   -----   TEXT FORMATTING   -----   ###
readonly T_BOLD="${T_ESC}${T_USE_COLOR+"1m"}"              T_BLINK="${T_ESC}${T_USE_COLOR+"5m"}"
readonly T_DIM="${T_ESC}${T_USE_COLOR+"2m"}"               T_REVERSE="${T_ESC}${T_USE_COLOR+"7m"}"
readonly T_ITALIC="${T_ESC}${T_USE_COLOR+"3m"}"            T_HIDDEN="${T_ESC}${T_USE_COLOR+"8m"}"
readonly T_UNDERLINE="${T_ESC}${T_USE_COLOR+"4m"}"         T_STRIKE="${T_ESC}${T_USE_COLOR+"9m"}"

###   -----   FOREGROUND COLORS   -----   ###
readonly TF_BLACK="${T_ESC}${T_USE_COLOR+"30m"}"           TF_WHITE="${T_ESC}${T_USE_COLOR+"97m"}"
readonly TF_RED="${T_ESC}${T_USE_COLOR+"31m"}"             TF_BRIGHT_RED="${T_ESC}${T_USE_COLOR+"91m"}"
readonly TF_GREEN="${T_ESC}${T_USE_COLOR+"32m"}"           TF_BRIGHT_GREEN="${T_ESC}${T_USE_COLOR+"92m"}"
readonly TF_YELLOW="${T_ESC}${T_USE_COLOR+"33m"}"          TF_BRIGHT_YELLOW="${T_ESC}${T_USE_COLOR+"93m"}"
readonly TF_BLUE="${T_ESC}${T_USE_COLOR+"34m"}"            TF_BRIGHT_BLUE="${T_ESC}${T_USE_COLOR+"94m"}"
readonly TF_MAGENTA="${T_ESC}${T_USE_COLOR+"35m"}"         TF_BRIGHT_MAGENTA="${T_ESC}${T_USE_COLOR+"95m"}"
readonly TF_CYAN="${T_ESC}${T_USE_COLOR+"36m"}"            TF_BRIGHT_CYAN="${T_ESC}${T_USE_COLOR+"96m"}"
readonly TF_DARK_GRAY="${T_ESC}${T_USE_COLOR+"90m"}"       TF_BRIGHT_GRAY="${T_ESC}${T_USE_COLOR+"37m"}"

###   -----   BACKGROUND COLORS   -----   ###
readonly TB_BLACK="${T_ESC}${T_USE_COLOR+"40m"}"           TB_WHITE="${T_ESC}${T_USE_COLOR+"107m"}"
readonly TB_RED="${T_ESC}${T_USE_COLOR+"41m"}"             TB_BRIGHT_RED="${T_ESC}${T_USE_COLOR+"101m"}"
readonly TB_GREEN="${T_ESC}${T_USE_COLOR+"42m"}"           TB_BRIGHT_GREEN="${T_ESC}${T_USE_COLOR+"102m"}"
readonly TB_YELLOW="${T_ESC}${T_USE_COLOR+"43m"}"          TB_BRIGHT_YELLOW="${T_ESC}${T_USE_COLOR+"103m"}"
readonly TB_BLUE="${T_ESC}${T_USE_COLOR+"44m"}"            TB_BRIGHT_BLUE="${T_ESC}${T_USE_COLOR+"104m"}"
readonly TB_MAGENTA="${T_ESC}${T_USE_COLOR+"45m"}"         TB_BRIGHT_MAGENTA="${T_ESC}${T_USE_COLOR+"105m"}"
readonly TB_CYAN="${T_ESC}${T_USE_COLOR+"46m"}"            TB_BRIGHT_CYAN="${T_ESC}${T_USE_COLOR+"106m"}"
readonly TB_DARK_GRAY="${T_ESC}${T_USE_COLOR+"100m"}"      TB_BRIGHT_GRAY="${T_ESC}${T_USE_COLOR+"47m"}"





### --- EXTRA ADVANCED COLORING --- ###

_t_advanced_color_helper() {
	if [ -z "${T_USE_COLOR+"x"}" ]; then return 0; fi
	_T_TYPE="$1"
	_T_ARGS="$2"
	case "$_T_TYPE" in
		"fg") _T_CODE="38";;
		"bg") _T_CODE="48";;
		*) printf "%b\n" "First parameter must be either 'fg' or 'bg'"; return 1;;
	esac
	printf "%s" "${T_ESC}${_T_CODE};${_T_ARGS}m"
}

_t_is_valid_int() {
	_T_VALUE="$1"
	_T_LABEL="${2:+"Option \'$2\': "}"
	_T_MIN_VALUE=0
	_T_MAX_VALUE=255
	if [ "$_T_VALUE" -lt "$_T_MIN_VALUE" ] || [ "$_T_VALUE" -gt "$_T_MAX_VALUE" ]; then
		printf "%b\n" "${_T_LABEL}${_T_VALUE} is out of range. Valid within ${_T_MIN_VALUE}-${_T_MAX_VALUE}" 1>&2
		return 1;
	fi
}

### --- 8 BIT COLOR --- ###
t_color() {
	_T_COLOR="${2?Missing second parameter as color code}"
	_T_TYPE="${1}"
	_t_is_valid_int "$_T_COLOR" || return 1
	printf "%s" "$(_t_advanced_color_helper "$_T_TYPE" "5;${_T_COLOR}")"
}


### --- 24 BIT TRUE COLOR --- ###
t_rgb() {
	_T_COLOR_B="${4?Must give four parameters: 'fg/bg' '#r' '#g' '#b'}"
	_T_COLOR_G="$3"
	_T_COLOR_R="$2"
	_T_TYPE="$1"
	_t_is_valid_int "$_T_COLOR_R" "R" || return 1
	_t_is_valid_int "$_T_COLOR_G" "G" || return 1
	_t_is_valid_int "$_T_COLOR_B" "B" || return 1
	printf "%s" "$(_t_advanced_color_helper "$_T_TYPE" "2;${_T_COLOR_R};${_T_COLOR_G};${_T_COLOR_B}")"
}





# Helper functions for echoing/printing text.
# printf is fully posix compliant and is generally safer than echo.
# These auto resets formating
print() {
	printf "%b${TR}\n" "$@"
}

stderr() {
	print "$@" 1>&2
}
